buildscript {
    ext { springBootVersion = '1.5.2.RELEASE' }
    repositories {
      mavenCentral()
      maven { url "https://plugins.gradle.org/m2/" }
      }
    dependencies {
      classpath('se.transmode.gradle:gradle-docker:1.2')
      classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
      classpath("gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6")
      classpath("gradle.plugin.com.avast.gradle:docker-compose-gradle-plugin:0.3.27")
      }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'
//java formater
//apply plugin: 'com.github.sherter.google-java-format'


jar {
    baseName = 'configuration-service'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release" }
}




dependencies {
    compile('org.springframework.cloud:spring-cloud-config-server')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    //AWS DynamoDB SDK
    compile('com.amazonaws:aws-java-sdk-dynamodb:1.11.197')

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR5"
    }
}

group = 'docker.comcast.net/diagnostic'


task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = 'altconfigservice'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}
